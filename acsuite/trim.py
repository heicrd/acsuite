import vapoursynth as vs

from typing import List, Optional, Union

from .ffmpeg import FFmpegAudio
from .timecode import frames_to_timecodes, get_timecodes
from .types import Trim


def eztrim(
    src: str,
    /,
    trims: Union[List[Trim], Trim],
    ref_clip: Optional[vs.VideoNode] = None,
    outfile: Union[str, List[str]] = "{filename}_ATrim.mka",
    combine: bool = True,
    streams: Union[int, List[int], None] = None,
    *,
    ffmpeg_path: Optional[str] = None,
    timecodes_file: Optional[str] = None,
) -> List[str]:
    """
    Simple trimming function that follows VapourSynth/Python slicing syntax.

    End frame is NOT inclusive.

    For a 100 frame long VapourSynth clip:

    >>> src = core.ffms2.Source('file.mkv')
    >>> clip = src[3:22]+src[23:40]+src[48]+src[50:-20]+src[-10:-5]+src[97:]
    >>> 'These trims can be almost directly entered as:'
    >>> trims = [(3, 22), (23, 40), (48, 49), (50, -20), (-10, -5), (97, None)]
    >>> eztrim('file.mkv', trims)

    >>> src = core.ffms2.Source('file.mkv')
    >>> clip = src[3:-13]
    >>> 'A single slice can be entered as a single tuple:'
    >>> eztrim('file.mkv', (3, -13))


    :param src:           Input multimedia container, must contain audio.
                          If no other timecode source is provided (ref_clip, timecodes_file),
                          this file will be opened with ffms2.
    :param trims:         Either a list of 2-tuples, or one tuple of 2 ints.

        Empty slicing must represented with a ``None``.
            ``src[:10]+src[-5:]`` must be entered as ``trims=[(None, 10), (-5, None)]``.

        Single frame slices must be represented as a normal slice.
            ``src[15]`` must be entered as ``trims=(15, 16)``.

    :param ref_clip:    Vapoursynth clip used to determine framerate, instead of ``clip``.

    :param outfile:     Output file. If multiple streams are selected, must contain
                        either the format specifier ``index`` or be a list, unless
                        ``combine`` is True. May contain ``filename`` format specifier.
                        If not present, ".mka" will be appended.
                        (Default: "{filename}_ATrim.mka")

    :param combine:     Keep all performed trims in the same file (Default: True)

    :param streams:     Streams to trim. A list of zero-index audio streams (igonring video and subtitles)
                        or None for all streams. (Default: None)

    :param ffmpeg_path: Set this if ``ffmpeg`` is not in your `PATH`.
                        If ``ffmpeg`` exists in your `PATH`, it will automatically be detected and used.

    :param timecodes_file: Timecodes v2 file (generated by vspipe, ffms2, etc.) for variable-frame-rate clips.
                           Not needed for CFR clips.

    :return: Returns output file names as strings.
    """
    trims = [trims] if isinstance(trims, tuple) else trims
    timecodes = get_timecodes(timecodes_file, ref_clip or vs.core.ffms2.Source(src))
    ranges = frames_to_timecodes(trims, timecodes)
    ffmpeg = FFmpegAudio(ffmpeg_path)
    selected = ffmpeg.get_audio_streams(src, streams)
    return ffmpeg.recut(src, ranges, selected, outfile, combine)
